Ìª†Ô∏è Anv√§ndarinstruktioner
Programmet √§r menybaserat. F√∂lj instruktionerna nedan f√∂r att komma ig√•ng.

Inloggning och Anv√§ndarhantering
Start: Vid start l√§ses befintlig data in fr√•n users.json och trades.json.

Inloggning/Registrering: F√∂lj menyns instruktioner f√∂r att antingen logga in med en befintlig e-postadress eller skapa en ny anv√§ndare.

Huvudmeny: Efter lyckad inloggning f√•r du tillg√•ng till f√∂ljande val:

1. Hantera F√∂rem√•l: L√§gg till eller visa dina egna f√∂rem√•l.

2. Hantera Bytesf√∂rfr√•gningar: Skicka nya f√∂rfr√•gningar eller svara p√• inkommande.

0. Logga ut/Avsluta: Sparar all data och st√§nger programmet.

Bytesprocessen
V√§lj alternativet att skicka en bytesf√∂rfr√•gan.

Programmet visar en numrerad lista √∂ver alla tillg√§ngliga anv√§ndare. V√§lj en anv√§ndare genom att ange dess nummer.

V√§lj ett f√∂rem√•l du vill ge bort genom att skriva dess namn.

V√§lj ett f√∂rem√•l du vill f√• fr√•n den andra anv√§ndarens inventarium genom att skriva dess namn.

En bytesf√∂rfr√•gan skickas och visas i mottagarens meddelandefl√∂de.

Ì∑† Implementationsval och Resonemang
H√§r resonerar ni kring er C#-design och de val ni gjort g√§llande OOP (Objektorienterad Programmering).

1. Struktur och Organisation
Vi valde att separera programlogiken p√• f√∂ljande s√§tt:

Program.cs: Inneh√•ller endast programmets fl√∂deskontroll (huvudmenyn, switch-satserna) och hanterar inl√§sning/sparande vid start/stopp.

Extra.cs (Statisk Klass): Anv√§nds f√∂r alla hj√§lpfunktioner s√•som utskrift av f√§rgad text (DisplayAlertText), validering av input (GetIntegerInput, GetRequiredInput), och JSON-hantering.

Resonemang: Detta f√∂ljer principen Single Responsibility Principle (SRP) och g√∂r Program.cs ren och l√§ttl√§st. Alla vanliga uppgifter centraliseras.

2. Komposition vs. Arv (Inheritance)
Vi har prioriterat Komposition framf√∂r Arv i stora delar av designen.

Komposition: Anv√§nds d√§r klasser "har ett" f√∂rh√•llande. Till exempel:

Klassen User har en lista av Item.

Klassen Trade har referenser till tv√• User och tv√• Item.

Resonemang: Komposition ger st√∂rre flexibilitet. Om vi hade anv√§nt arv (t.ex. om Trade √§rvde fr√•n User), skulle vi ha l√•st designen. Att anv√§nda komposition skapar tydliga och oberoende objektrelationer.

Arv (Inheritance): Anv√§ndes inte d√• det inte fanns n√•got tydligt "√§r ett" f√∂rh√•llande mellan huvudklasserna (User, Item, Trade). Att inf√∂ra arv hade sannolikt lett till on√∂dig komplexitet och "klasshierarkier" som var sv√•ra att underh√•lla (Base Class ‚Üí Sub Class).

3. Hantering av Anv√§ndarinput
Ist√§llet f√∂r att anv√§nda den inbyggda Thread.Sleep() eller komplexa if (int.TryParse(...)) logiken, implementerade vi dedikerade hj√§lpfunktioner.

Extra.WaitForInput(): Anv√§nds ist√§llet f√∂r Thread.Sleep().

Resonemang: Detta ger kontroll till anv√§ndaren och skapar en b√§ttre upplevelse. Anv√§ndaren kan l√§sa informationen i sin egen takt.

Extra.GetIntegerInput() / Extra.GetRequiredInput(): Dessa funktioner loopar tills de f√•r ett giltigt val.

Resonemang: Detta garanterar datas√§kerhet och f√∂ljer DRY-principen (Don't Repeat Yourself). All felhantering f√∂r ogiltig inmatning centraliseras, vilket g√∂r huvudprogrammets logik ren och robust.

4. Datapersistens (JSON)
Programmet anv√§nder System.Text.Json och File.IO f√∂r att spara och ladda alla objekt (User och Trade) till JSON-filer vid programstart och avslut.

Resonemang: Detta val s√§kerst√§ller att data best√•r mellan olika k√∂rningar av programmet utan att beh√∂va en fullfj√§drad databas. JSON √§r l√§ttviktigt och enkelt att hantera i C#.
